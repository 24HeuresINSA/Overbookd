name: API CI/CD

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: assomaker_backend_api

jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      KEYCLOAK_PASSWORD: ${{ secrets.KEYCLOAK_PASSWORD }}
      KEYCLOAK_DATABASE_PASSWORD: ${{ secrets.KEYCLOAK_DATABASE_PASSWORD }}
      DATABASE_PORT: 3307

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - name: Start docker-compose
        uses: isbang/compose-action@v0.1.1

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2

      - name: wait for keycloak to boot up
        run: sleep 40s

      - name: setup environment
        run:  |
          npm install
          npm run populate
          sudo npm run setup
          npm run create_admin

      - name: Postman runner
        uses: matt-ball/newman-action@v0.2.0
        with:
          collection: test/CI.postman_collection.json
          globals: test/CI.postman_globals.json

  push:
    # Ensure test job passes before pushing image.
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
