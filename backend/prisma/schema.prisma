// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  DEPOSIT
  EXPENSE
  TRANSFER
}

enum Year {
  A1
  A2
  A3
  A4
  A5
  VIEUX
  AUTRE
}

enum Department {
  TC
  IF
  GE
  GM
  GI
  GCU
  GEN
  SGM
  BS
  FIMI
  AUTRE
}

model User {
  id                      Int        @id @default(autoincrement())
  firstname               String     @db.VarChar(30)
  lastname                String     @db.VarChar(30)
  nickname                String     @db.VarChar(30)
  email                   String     @unique
  birthdate               DateTime
  phone                   String     @db.VarChar(30)
  department              Department
  comment                 String?
  reset_password_token    String?
  reset_password_expires  DateTime?
  has_payed_contributions Boolean    @default(false)
  year                    Year
  pp                      String?
  charisma                Float      @default(0)
  balance                 Float      @default(0)
  password                String     @default("")
  created_at              DateTime   @default(now())
  updated_at              DateTime   @updatedAt

  team           User_Team[]
  Availabilities Availabilities[]

  transactions_from Transaction[] @relation("from")
  transactions_to   Transaction[] @relation("to")

  is_deleted    Boolean         @default(false)
  fa_in_charge  FA[]            @relation("in_charge")
  FA_validation FA_validation[]
  FA_refuse     FA_refuse[]
  FA_Comment    FA_Comment[]
}

model Team {
  name         String       @id @default(uuid())
  fa_validator Boolean      @default(false)
  ft_validator Boolean      @default(false)
  users        User_Team[]
  FA           FA[]
  FA_Comment   FA_Comment[]
}

model User_Team {
  user    User   @relation(fields: [user_id], references: [id])
  user_id Int
  team    Team   @relation(fields: [team_id], references: [name])
  team_id String

  @@id([user_id, team_id])
}

model TimeSlot {
  id             Int              @id @default(autoincrement())
  group_name     String
  start          DateTime
  end            DateTime
  charisma       Int
  is_hard_only   Boolean          @default(false)
  Availabilities Availabilities[]
  is_deleted     Boolean          @default(false)
}

model Availabilities {
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])
  timeslot_id Int
  timeslot    TimeSlot @relation(fields: [timeslot_id], references: [id])
  is_deleted  Boolean  @default(false)

  @@id([user_id, timeslot_id])
}

model Transaction {
  id         Int             @id @default(autoincrement())
  type       TransactionType
  from       Int
  user_from  User            @relation("from", fields: [from], references: [id])
  to         Int             @default(-1)
  user_to    User            @relation("to", fields: [to], references: [id])
  amount     Float           @default(0)
  context    String          @default("") @db.VarChar(255)
  created_at DateTime        @default(now())
  is_deleted Boolean         @default(false)
}

enum Status {
  DRAFT
  SUBMITTED
  VALIDATED
  REFUSED
}

model FA {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  is_deleted           Boolean                @default(false)
  fa_type_name         FA_type                @relation(fields: [type], references: [name])
  type                 String                 @db.VarChar(255)
  Team                 Team                   @relation(fields: [team_id], references: [name])
  team_id              String                 @db.VarChar(255)
  User_in_charge       User                   @relation(fields: [in_charge], references: [id], name: "in_charge")
  in_charge            Int
  created_at           DateTime?              @default(now())
  Location             Location?              @relation(fields: [location_id], references: [id])
  location_id          Int?
  status               Status                 @default(DRAFT)
  description          String                 @db.Text
  is_publishable       Boolean
  is_major             Boolean
  is_kids              Boolean
  FA_validation        FA_validation[]
  FA_refuse            FA_refuse[]
  security_needs       String?                @db.Text
  water_flow_required  Int?
  FA_Collaborators     FA_Collaborators[]
  FA_Electricity_needs FA_Electricity_needs[]
  FA_signa_needs       FA_signa_needs[]
  Security_pass        Security_pass[]
  FA_Comment           FA_Comment[]
  TimeWindow           TimeWindow[]
}

model FA_type {
  name String @id @db.VarChar(255)
  FA   FA[]
}

model FA_validation {
  FA         FA      @relation(fields: [fa_id], references: [id])
  fa_id      Int
  User       User    @relation(fields: [user_id], references: [id])
  user_id    Int
  is_deleted Boolean @default(false)

  @@id([fa_id, user_id])
}

model FA_Collaborators {
  FA              FA           @relation(fields: [fa_id], references: [id])
  fa_id           Int
  Collaborator    Collaborator @relation(fields: [collaborator_id], references: [id])
  collaborator_id Int
  is_deleted      Boolean      @default(false)

  @@id([fa_id, collaborator_id])
}

model FA_refuse {
  FA         FA      @relation(fields: [fa_id], references: [id])
  fa_id      Int
  User       User    @relation(fields: [user_id], references: [id])
  user_id    Int
  is_deleted Boolean @default(false)

  @@id([fa_id, user_id])
}

enum LocationType {
  DEPOT
  STOCKAGE
  MAGASIN
  SIGNA
  AUTRE
}

model Location {
  id   Int          @id @default(autoincrement())
  type LocationType
  name String       @db.VarChar(255)
  FA   FA[]
}

model Collaborator {
  id               Int                @id @default(autoincrement())
  firstname        String             @db.VarChar(30)
  lastname         String             @db.VarChar(30)
  phone            String             @db.VarChar(30)
  email            String?            @db.VarChar(30)
  company          String?            @db.VarChar(30)
  comment          String?            @db.Text
  FA_Collaborators FA_Collaborators[]
}

//A définir correctement plus tard, placeholder pour le moment
enum ElectricityType {
  ELECTRICITY
  WATER
  GAS
  OTHER
}

model FA_Electricity_needs {
  id               Int             @id @default(autoincrement())
  FA               FA              @relation(fields: [fa_id], references: [id])
  fa_id            Int
  electricity_type ElectricityType
  power            Int
  comment          String?         @db.Text
}

enum SignaType {
  BANNIERE
  PANCARTE
  PANNEAU
}

model FA_signa_needs {
  id         Int       @id @default(autoincrement())
  FA         FA        @relation(fields: [fa_id], references: [id])
  fa_id      Int
  signa_type SignaType
  text       String    @db.Text
  count      Int       @default(1)
}

//A définir correctement plus tard, placeholder pour le moment
enum Security_pass_schedules {
  JOUR
  NUIT
  JOUR_NUIT
}

model Security_pass {
  id            Int                     @id @default(autoincrement())
  FA            FA                      @relation(fields: [fa_id], references: [id])
  fa_id         Int
  name          String                  @db.VarChar(30)
  phone         String?                 @db.VarChar(30)
  license_plate String?                 @db.VarChar(30)
  email         String                  @db.VarChar(30)
  comment       String?                 @db.Text
  entity        String                  @db.VarChar(30)
  reason        String                  @db.VarChar(30)
  schedule      Security_pass_schedules
}

enum subject_type {
  REFUSED
  VALIDATED
  COMMENT
}

model FA_Comment {
  id          Int          @id @default(autoincrement())
  FA          FA           @relation(fields: [fa_id], references: [id])
  fa_id       Int
  comment     String       @db.Text
  subject     subject_type
  User_author User         @relation(fields: [author], references: [id])
  author      Int
  created_at  DateTime     @default(now())
  Team        Team         @relation(fields: [team_id], references: [name])
  team_id     String       @db.VarChar(255)
}

model TimeWindow {
  id    Int      @id @default(autoincrement())
  FA    FA       @relation(fields: [fa_id], references: [id])
  fa_id Int
  start DateTime
  end   DateTime
}
