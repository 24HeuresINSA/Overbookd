// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  DEPOSIT
  EXPENSE
  TRANSFER
}

enum Year {
  A1
  A2
  A3
  A4
  A5
  VIEUX
  AUTRE
}

enum Department {
  TC
  IF
  GE
  GM
  GI
  GCU
  GEN
  SGM
  BS
  FIMI
  AUTRE
}

model User {
  id                      Int        @id @default(autoincrement())
  firstname               String     @db.VarChar(30)
  lastname                String     @db.VarChar(30)
  nickname                String?    @db.VarChar(30)
  email                   String     @unique
  birthdate               DateTime
  phone                   String     @db.VarChar(30)
  department              Department
  comment                 String?
  reset_password_token    String?    @unique
  reset_password_expires  DateTime?
  has_payed_contributions Boolean    @default(false)
  year                    Year
  pp                      String?
  charisma                Float      @default(0)
  balance                 Float      @default(0)
  password                String     @default("")
  created_at              DateTime   @default(now())
  updated_at              DateTime   @updatedAt

  team           User_Team[]
  Availabilities Availabilities[]

  transactions_from Transaction[] @relation("from")
  transactions_to   Transaction[] @relation("to")

  is_deleted    Boolean         @default(false)
  fa_in_charge  fa[]            @relation("in_charge")
  fa_validation fa_validation[]
  fa_refuse     fa_refuse[]
  fa_comments   fa_comments[]

  ftsInCharge    Ft[]            @relation("inCharge")
  ftFeedbacks    FtFeedback[]
  ftUserRequests FtUserRequest[]
}

model Team {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar(30)
  users            User_Team[]
  color            String             @default("#000000") @db.VarChar(30)
  icon             String             @default("mdi-circle") @db.VarChar(255)
  fa               fa[]
  fa_validation    fa_validation[]
  fa_refuse        fa_refuse[]
  code             String?            @unique @db.VarChar(20)
  owned_categories Catalog_Category[] @relation("owner")
  ftRequests       FtTeamRequest[]
  ftReviews        FtReview[]
  permissions      Team_Permission[]
  Ft               Ft[]
}

model User_Team {
  user    User @relation(fields: [user_id], references: [id])
  user_id Int
  team    Team @relation(fields: [team_id], references: [id])
  team_id Int

  @@id([user_id, team_id])
}

model Permission {
  id          Int               @id @default(autoincrement())
  name        String            @unique @db.VarChar(30)
  description String?           @db.VarChar(255)
  teams       Team_Permission[]
}

model Team_Permission {
  team            Team       @relation(fields: [team_code], references: [code])
  team_code       String
  permission      Permission @relation(fields: [permission_name], references: [name], onDelete: Cascade)
  permission_name String     @map("permission_name")

  @@id([team_code, permission_name])
}

model TimeSlot {
  id             Int              @id @default(autoincrement())
  group_name     String
  start          DateTime
  end            DateTime
  charisma       Int
  is_hard_only   Boolean          @default(false)
  Availabilities Availabilities[]
  is_deleted     Boolean          @default(false)
}

model Availabilities {
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])
  timeslot_id Int
  timeslot    TimeSlot @relation(fields: [timeslot_id], references: [id])
  is_deleted  Boolean  @default(false)

  @@id([user_id, timeslot_id])
}

model Transaction {
  id         Int             @id @default(autoincrement())
  type       TransactionType
  from       Int
  user_from  User            @relation("from", fields: [from], references: [id])
  to         Int             @default(-1)
  user_to    User            @relation("to", fields: [to], references: [id])
  amount     Float           @default(0)
  context    String          @default("") @db.VarChar(255)
  created_at DateTime        @default(now())
  is_deleted Boolean         @default(false)
}

enum Status {
  DRAFT
  SUBMITTED
  VALIDATED
  REFUSED
}

model fa {
  id                     Int                     @id @default(autoincrement())
  name                   String                  @db.VarChar(255)
  fa_type_name           fa_type?
  type                   String?                 @db.VarChar(255)
  Team                   Team?                   @relation(fields: [team_id], references: [id])
  team_id                Int?
  user_in_charge         User?                   @relation(fields: [in_charge], references: [id], name: "in_charge")
  in_charge              Int?
  created_at             DateTime?               @default(now())
  location               Signa_Location?         @relation(fields: [location_id], references: [id])
  location_id            Int?
  status                 Status?                 @default(DRAFT)
  description            String?                 @db.Text
  is_major               Boolean?                @default(false)
  is_kids                Boolean?                @default(false)
  security_needs         String?                 @db.Text
  is_pass_required       Boolean?                @db.Boolean
  number_of_pass         Int?
  water_needs            String?                 @db.Text
  water_flow_required    Int?
  is_deleted             Boolean                 @default(false)
  fa_validation          fa_validation[]
  fa_refuse              fa_refuse[]
  fa_collaborators       fa_collaborators[]
  fa_electricity_needs   fa_electricity_needs[]
  fa_signa_needs         fa_signa_needs[]
  fa_comments            fa_comments[]
  time_windows           time_windows[]
  gearRequests           GearRequest[]           @relation("gear-request-animation")
  faSitePublishAnimation FaSitePublishAnimation?
  fts                    Ft[]
}

enum fa_type {
  Concert
  Course
  Divertissement
  Initiation
  Tournoi
  Vente
  Prevention
  Spectacle
  Autre
}

model fa_validation {
  fa         fa       @relation(fields: [fa_id], references: [id])
  fa_id      Int
  User       User     @relation(fields: [user_id], references: [id])
  user_id    Int
  Team       Team     @relation(fields: [team_id], references: [id])
  team_id    Int
  created_at DateTime @default(now())
  is_deleted Boolean  @default(false)

  @@id([fa_id, team_id])
}

model fa_collaborators {
  fa              fa           @relation(fields: [fa_id], references: [id])
  fa_id           Int
  collaborator    collaborator @relation(fields: [collaborator_id], references: [id], onDelete: Cascade)
  collaborator_id Int
  is_deleted      Boolean      @default(false)

  @@id([fa_id, collaborator_id])
}

model fa_refuse {
  fa         fa       @relation(fields: [fa_id], references: [id])
  fa_id      Int
  User       User     @relation(fields: [user_id], references: [id])
  user_id    Int
  Team       Team     @relation(fields: [team_id], references: [id])
  team_id    Int
  created_at DateTime @default(now())
  is_deleted Boolean  @default(false)

  @@id([fa_id, team_id])
}

model Signa_Location {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  fa   fa[]
  fts  Ft[]
}

model collaborator {
  id               Int                @id @default(autoincrement())
  firstname        String             @db.VarChar(30)
  lastname         String             @db.VarChar(30)
  phone            String             @db.VarChar(30)
  email            String?            @db.VarChar(60)
  company          String?            @db.VarChar(30)
  comment          String?            @db.Text
  fa_collaborators fa_collaborators[]

  @@unique([firstname, lastname])
}

//A d√©finir correctement plus tard, placeholder pour le moment
enum electricity_type {
  PC16_Prise_classique
  P17_16A_MONO
  P17_16A_TRI
  P17_16A_TETRA
  P17_32A_MONO
  P17_32A_TRI
  P17_32A_TETRA
  P17_63A_MONO
  P17_63A_TRI
  P17_63A_TETRA
  P17_125A_TETRA
}

model fa_electricity_needs {
  id               Int              @id @default(autoincrement())
  fa               fa               @relation(fields: [fa_id], references: [id])
  fa_id            Int
  electricity_type electricity_type
  device           String?          @db.Text
  power            Int
  count            Int?
  comment          String?          @db.Text
}

enum signa_type {
  BANNIERE
  PANCARTE
  PANNEAU
}

model fa_signa_needs {
  id         Int        @id @default(autoincrement())
  fa         fa         @relation(fields: [fa_id], references: [id])
  fa_id      Int
  signa_type signa_type
  text       String     @db.Text
  count      Int        @default(1)
  comment    String?    @db.Text
}

enum subject_type {
  REFUSED
  SUBMIT
  VALIDATED
  COMMENT
}

model fa_comments {
  id          Int          @id @default(autoincrement())
  fa          fa           @relation(fields: [fa_id], references: [id])
  fa_id       Int
  comment     String       @db.Text
  subject     subject_type
  User_author User         @relation(fields: [author], references: [id])
  author      Int
  created_at  DateTime     @default(now())
}

model FaSitePublishAnimation {
  fa          fa                                     @relation(fields: [faId], references: [id], onDelete: Cascade)
  faId        Int                                    @id @map("fa_id")
  photoLink   String?                                @map("photo_link ") @db.Text
  description String?                                @db.Text
  categories  site_publish_animation_category_type[]

  @@map("fa_site_publish_animation")
}

enum site_publish_animation_category_type {
  Divertissement
  Culture
  Sport
  Enfant
}

enum time_windows_type {
  ANIM
  MATOS
}

model time_windows {
  id    Int               @id @default(autoincrement())
  fa    fa                @relation(fields: [fa_id], references: [id])
  fa_id Int
  start DateTime
  end   DateTime
  type  time_windows_type
}

model Catalog_Category {
  id             Int                @id @default(autoincrement())
  name           String
  path           String             @unique
  parent         Int?
  parentCategory Catalog_Category?  @relation("parent", fields: [parent], references: [id])
  subCategories  Catalog_Category[] @relation("parent")
  owner_id       Int?
  owner          Team?              @relation("owner", fields: [owner_id], references: [id])
  gears          Catalog_Gear[]     @relation("category")
}

model Catalog_Gear {
  id               Int               @id @default(autoincrement())
  name             String
  slug             String            @unique
  category_id      Int?
  category         Catalog_Category? @relation("category", fields: [category_id], references: [id])
  requests         GearRequest[]     @relation("gear-request-gear")
  isPonctualUsage  Boolean           @default(false) @map("is_ponctual_usage")
  inventoryRecords InventoryRecord[] @relation()

  @@index([isPonctualUsage])
}

model Configuration {
  key        String  @id @unique
  value      Json
  is_deleted Boolean @default(false)
}

model Period {
  id          Int           @id @default(autoincrement())
  start       DateTime
  end         DateTime
  gearRequest GearRequest[] @relation("gear-request-rental-period")

  @@index([start, end])
}

model GearRequest {
  animationId    Int?
  animation      fa?          @relation("gear-request-animation", fields: [animationId], references: [id], onDelete: Cascade)
  taskId         Int?
  task           Ft?          @relation("gear-request-task", fields: [taskId], references: [id], onDelete: Cascade)
  rentalPeriodId Int
  rentalPeriod   Period       @relation("gear-request-rental-period", fields: [rentalPeriodId], references: [id], onDelete: Cascade)
  gearId         Int
  gear           Catalog_Gear @relation("gear-request-gear", fields: [gearId], references: [id], onDelete: Cascade)
  quantity       Int
  status         String
  drive          String?

  @@unique([gearId, rentalPeriodId])
  @@index([status])
  @@map("gear_request")
}

enum FtStatus {
  DRAFT
  SUBMITTED
  VALIDATED
  REFUSED
  READY

  @@map("ft_status")
}

model Ft {
  id             Int             @id @default(autoincrement())
  name           String
  status         FtStatus        @default(DRAFT)
  fa             fa?             @relation(fields: [parentFaId], references: [id])
  parentFaId     Int?            @map("parent_fa_id")
  team           Team?           @relation(fields: [teamCode], references: [code])
  teamCode       String?         @map("team_code")
  isStatic       Boolean         @default(false) @map("is_static")
  description    String?         @db.Text
  userInCharge   User?           @relation(fields: [userInChargeId], references: [id], name: "inCharge")
  userInChargeId Int?            @map("user_in_charge_id")
  location       Signa_Location? @relation(fields: [locationId], references: [id])
  locationId     Int?            @map("location_id")
  isDeleted      Boolean         @default(false) @map("is_deleted")

  feedbacks    FtFeedback[]
  timeWindows  FtTimeWindows[]
  reviews      FtReview[]
  gearRequests GearRequest[]   @relation("gear-request-task")

  @@map("ft")
}

enum FtSubjectType {
  REFUSED
  SUBMIT
  VALIDATED
  COMMENT
  READY

  @@map("ft_subject_type")
}

model FtFeedback {
  id        Int           @id @default(autoincrement())
  ft        Ft            @relation(fields: [ftId], references: [id], onDelete: Cascade)
  ftId      Int           @map("ft_id")
  comment   String        @db.Text
  subject   FtSubjectType
  author    User          @relation(fields: [authorId], references: [id])
  authorId  Int           @map("author_id")
  createdAt DateTime      @default(now()) @map("created_at")

  @@map("ft_feedback")
}

model FtTimeWindows {
  id           Int             @id @default(autoincrement())
  ft           Ft              @relation(fields: [ftId], references: [id], onDelete: Cascade)
  ftId         Int             @map("ft_id")
  start        DateTime
  end          DateTime
  sliceTime    Float?          @map("slice_time")
  userRequests FtUserRequest[]
  teamRequests FtTeamRequest[]

  @@map("ft_time_windows")
  @@index([start(sort: Asc)])
  @@index([end(sort: Desc)])
}

model FtUserRequest {
  ftTimeWindows   FtTimeWindows @relation(fields: [ftTimeWindowsId], references: [id], onDelete: Cascade)
  ftTimeWindowsId Int           @map("ft_time_windows_id")
  user            User          @relation(fields: [userId], references: [id])
  userId          Int           @map("user_id")

  @@unique([ftTimeWindowsId, userId])
  @@map("ft_user_request")
}

model FtTeamRequest {
  timeWindows   FtTimeWindows @relation(fields: [timeWindowsId], references: [id], onDelete: Cascade)
  timeWindowsId Int           @map("time_windows_id")
  team          Team          @relation(fields: [teamCode], references: [code])
  teamCode      String        @map("team_code")
  quantity      Int

  @@unique([timeWindowsId, teamCode])
  @@map("ft_team_request")
}

enum reviewStatus {
  VALIDATED
  REFUSED

  @@map("review_status")
}

model FtReview {
  ft       Ft           @relation(fields: [ftId], references: [id], onDelete: Cascade)
  ftId     Int          @map("ft_id")
  team     Team         @relation(fields: [teamCode], references: [code])
  teamCode String       @map("team_code")
  status   reviewStatus

  @@unique([ftId, teamCode])
  @@map("ft_review")
}

model InventoryRecord {
  gear     Catalog_Gear @relation(fields: [gearId], references: [id], onDelete: Cascade)
  gearId   Int          @map("gear_id")
  storage  String
  quantity Int

  @@unique([gearId, storage])
  @@map("inventory_record")
}
