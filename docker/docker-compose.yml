networks:
  overbookd_net-api:
  traefik-public:
    external: true

volumes:
  certs:


services:
  certs-downloader:
    image: alpine
    command: sh -c "cd /etc/ssl/traefik && wget https://traefik.me/cert.pem -O cert.pem && wget https://traefik.me/privkey.pem -O privkey.pem"
    volumes:
      - certs:/etc/ssl/traefik

  traefik:
    image: traefik:v3.2.1
    restart: unless-stopped
    command:
      # Docker config
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik-public"
      # Additional config with files
      - "--providers.file=true"
      - "--providers.file.directory=/etc/traefik"
      # Entrypoint
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # HTTP -> HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      # Enable Dashboard
      - "--api.dashboard=true"
      # Debug
      - "--log.level=DEBUG"
      # Disable https backend validation
      - "--serversTransport.insecureSkipVerify=true"
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/ssl/traefik
      - ./assets/traefik/tls.yml:/etc/traefik/tls.yml
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.services.traefik.loadbalancer.server.port=888"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=user:$$apr1$$mv/7eBGq$$blXoet7kdjDve702x5gLx/"

  api:
    container_name: overbookd_api
    user: ${MY_UID}:${MY_GID}
    image: overbookd:dev
    restart: unless-stopped
    networks:
      - overbookd_net-api
      - traefik-public
    volumes:
      - ../:/overbookd
    environment:
      DOMAIN: ${OVERBOOKD_DOMAIN}
      DATABASE_URL: postgresql://${OVERBOOKD_DATABASE_USERNAME}:${OVERBOOKD_DATABASE_PASSWORD}@overbookd_postgresql:5432/${OVERBOOKD_DATABASE_NAME}
      GMAIL_USER: ${OVERBOOKD_EMAIL_USER}
      GMAIL_PASS: ${OVERBOOKD_EMAIL_PASSWORD}
      JWT_SECRET: ${OVERBOOKD_JWT_SECRET}
      SWAGGER_USER: ${OVERBOOKD_SWAGGER_USER}
      SWAGGER_PASSWORD: ${OVERBOOKD_SWAGGER_PASSWORD}
      SMTP_HOST: overbookd_mail_catcher
      SMTP_PORT: 1025
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dev-back.tls=true"
      - "traefik.http.routers.dev-back.entrypoints=websecure"
      - "traefik.http.services.dev-back.loadbalancer.server.port=3000"
      - "traefik.http.routers.dev-back.rule=(Host(`overbookd.${DOMAIN}`) && PathPrefix(`/api`))"
      - "traefik.http.routers.dev-back.middlewares=api-strip"
      - "traefik.http.middlewares.api-strip.stripprefix.prefixes=/api"
    command:
      - /bin/sh
      - -c
      - |
        cd /overbookd
        export OVERBOOKD_VERSION=$$(jq '.version' package.json | tr -d '\"')
        pnpm config set store-dir .pnpm-store
        pnpm fetch
        pnpm --recursive --filter '@overbookd/api...' install
        pnpm --recursive --filter '@overbookd/api...' run build
        echo "============================================="
        echo "Overbookd version passed: $$OVERBOOKD_VERSION"
        echo "============================================="
        pnpm --recursive --filter '@overbookd/api' run start:dev

  mail_catcher:
    container_name: overbookd_mail_catcher
    image: sj26/mailcatcher:v0.10.0
    restart: unless-stopped
    networks:
      - overbookd_net-api
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dev-overbookd-mail-catcher.tls=true"
      - "traefik.http.routers.dev-overbookd-mail-catcher.entrypoints=websecure"
      - "traefik.http.services.dev-overbookd-mail-catcher.loadbalancer.server.port=1080"
      - "traefik.http.routers.dev-overbookd-mail-catcher.rule=Host(`mail.${DOMAIN}`)"

  postgresql:
    container_name: overbookd_postgresql
    image: postgres:16.6
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${OVERBOOKD_DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${OVERBOOKD_DATABASE_PASSWORD}
      - POSTGRES_DB=${OVERBOOKD_DATABASE_NAME}
    ports:
      - ${CUSTOM_POSTGRESQL_PORT:-5432}:5432
    networks:
      - overbookd_net-api
    volumes:
      - ./data/dev/postgresql:/var/lib/postgresql/data

  adminer:
    image: adminer:4.8.1
    restart: unless-stopped
    networks:
      - overbookd_net-api
      - traefik-public
    environment:
      ADMINER_DEFAULT_SERVER: overbookd_postgresql
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dev-adminer.tls=true"
      - "traefik.http.routers.dev-adminer.entrypoints=websecure"
      - "traefik.http.services.dev-adminer.loadbalancer.server.port=8080"
      - "traefik.http.routers.dev-adminer.rule=(Host(`overbookd.${DOMAIN}`) && PathPrefix(`/adminer`))"
      - "traefik.http.routers.dev-adminer.middlewares=adminer-strip"
      - "traefik.http.middlewares.adminer-strip.stripprefix.prefixes=/adminer"

  web:
    container_name: overbookd_web
    user: ${MY_UID}:${MY_GID}
    image: overbookd:dev
    volumes:
      - ../:/overbookd
    environment:
      - BASE_URL
      - HOST=0.0.0.0
    restart: unless-stopped
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dev-front.entrypoints=websecure"
      - "traefik.http.services.dev-front.loadbalancer.server.port=3000"
      - "traefik.http.routers.dev-front.rule=Host(`overbookd.${DOMAIN}`)"
      - "traefik.http.services.dev-front.loadbalancer.server.scheme=https"
      - "traefik.http.routers.dev-front.tls=true"
    command:
      - /bin/sh
      - -c
      - |
        cd /overbookd
        export OVERBOOKD_VERSION=$$(jq '.version' package.json | tr -d '\"')
        pnpm config set store-dir .pnpm-store
        pnpm fetch
        pnpm --recursive --filter '@overbookd/web...' install
        pnpm --recursive --filter '@overbookd/web...' run build
        echo "============================================="
        echo "Overbookd version passed: $$OVERBOOKD_VERSION"
        echo "============================================="
        pnpm --recursive --filter '@overbookd/web' run dev

  bash:
    build:
      context: ../.devcontainer
      dockerfile: Dockerfile

    hostname: overbookd-dev

    volumes:
      # Forwards the local Docker socket to the container.
      - /var/run/docker.sock:/var/run/docker-host.sock
      # Update this to wherever you want VS Code to mount the folder of your project
      - ../:/overbookd:cached
      - ./aliases:/home/vscode/.bash_aliases

    environment:
      DATABASE_URL: postgresql://${OVERBOOKD_DATABASE_USERNAME}:${OVERBOOKD_DATABASE_PASSWORD}@overbookd_postgresql:5432/${OVERBOOKD_DATABASE_NAME}

    networks:
      - overbookd_net-api

    # Overrides default command so things don't shut down after the process ends.
    entrypoint: /usr/local/share/docker-init.sh
    command: sleep infinity
    # Uncomment the next four lines if you will use a ptrace-based debuggers like C++, Go, and Rust.
    # cap_add:
    #  - SYS_PTRACE
    # security_opt:
    #   - seccomp:unconfined

    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)
