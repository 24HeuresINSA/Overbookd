.docker-publish:
  stage: docker-publish
  interruptible: true
  image: docker
  services:
    - name: docker:dind
      command: ["--experimental"]
  before_script:
    - apk update
    - apk add jq
    - VERSION_TAG=${VERSION_TAG_PREFIX}$(jq -r '.version' ./${SCOPE}/package.json)
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker load -i ${BASE_IMAGE}.tar
    - docker push $CI_REGISTRY_IMAGE/$SCOPE:$TAG
    - docker push $CI_REGISTRY_IMAGE/$SCOPE:$VERSION_TAG

preprod_overbookd-api_publish:
  extends: .docker-publish
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - apps/api/**/*
    - when: never
  needs: ["backend_docker_build", "backend_scan"]
  variables:
    SCOPE: backend
    VERSION_TAG_PREFIX: "pre-prod_"
    TAG: "pre-prod"
    BASE_IMAGE: "backend"

preprod_overbookd-web_publish:
  extends: .docker-publish
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - apps/web/**/*
    - when: never
  needs: ["preprod_frontend_docker_build", "frontend_scan"]
  variables:
    SCOPE: frontend
    VERSION_TAG_PREFIX: "pre-prod_"
    TAG: "pre-prod"
    BASE_IMAGE: "frontend_pre-prod"

prod_overbookd-api_publish:
  extends: .docker-publish
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - apps/api/**/*
      when: manual
      allow_failure: true
    - when: never
  needs: ["backend_docker_build", "backend_scan"]
  variables:
    SCOPE: backend
    VERSION_TAG_PREFIX: ""
    TAG: "latest"
    BASE_IMAGE: backend

prod_overbookd-web_publish:
  extends: .docker-publish
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - apps/web/**/*
      when: manual
      allow_failure: true
    - when: never
  needs: ["prod_frontend_docker_build", "frontend_scan"]
  variables:
    SCOPE: frontend
    VERSION_TAG_PREFIX: ""
    TAG: "latest"
    BASE_IMAGE: "frontend_prod"
