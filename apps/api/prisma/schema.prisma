// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "darwin-arm64", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  DEPOSIT
  TRANSFER
  BARREL
  PROVISIONS
  SHARED_MEAL

  @@map("transaction_type")
}

model User {
  id                   Int       @id @default(autoincrement())
  firstname            String    @db.VarChar(30)
  lastname             String    @db.VarChar(30)
  nickname             String?   @db.VarChar(30)
  email                String    @unique
  birthdate            DateTime
  phone                String    @db.VarChar(30)
  comment              String?
  resetPasswordToken   String?   @unique @map("reset_password_token")
  resetPasswordExpires DateTime? @map("reset_password_expires")
  profilePicture       String?   @map("profile_picture")
  charisma             Int       @default(0)
  balance              Int       @default(0)
  password             String    @default("")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  isDeleted            Boolean   @default(false) @map("is_deleted")

  teams UserTeam[]

  transactionsFrom Transaction[] @relation("from")
  transactionsTo   Transaction[] @relation("to")

  ftsInCharge      Ft[]                    @relation("inCharge")
  oldFtFeedbacks   FtFeedback[]
  ftUserRequests   FtUserRequest[]
  availabilities   VolunteerAvailability[]
  friendRequestors Friend[]                @relation("friend_requestor")
  friends          Friend[]                @relation("friend")
  ftsInReview      Ft[]                    @relation("reviewer")

  assignments                  Assignment[]
  contributions                Contribution[]
  notifications                Notification[]
  festivalActivities           FestivalActivity[]
  festivalActivityInstigations FestivalActivityHistory[]
  faFeedbacks                  FestivalActivityFeedback[]
  ftFeedbacks                  FestivalTaskFeedback[]
  chefMeals                    SharedMeal[]               @relation("chef")
  shotguns                     Shotgun[]                  @relation("guest")

  festivalTaskAdministrated FestivalTask[]                      @relation("task-administrator")
  festivalTaskInCharge      FestivalTaskInChargeVolunteer[]
  festivalTaskContacts      FestivalTaskContact[]
  festivalTaskInstigations  FestivalTaskHistory[]
  festivalTaskMobilizations FestivalTaskMobilizationVolunteer[]
  festivalTasksToReview     FestivalTask[]                      @relation("task-reviewer")

  @@map("user")
}

model Notification {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @id

  @@map("notification")
}

model Team {
  code  String @id @unique @db.VarChar(20)
  name  String @unique @db.VarChar(30)
  color String @default("#000000") @db.VarChar(30)
  icon  String @default("mdi-circle") @db.VarChar(255)

  users                     UserTeam[]
  ownedCategories           CatalogCategory[]              @relation("owner")
  ftRequests                FtTeamRequest[]
  ftReviews                 FtReview[]
  permissions               TeamPermission[]
  ft                        Ft[]
  festivalActivities        FestivalActivity[]
  festivalTasks             FestivalTask[]
  festivalTaskMobilizations FestivalTaskMobilizationTeam[]

  @@map("team")
}

model UserTeam {
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int    @map("user_id")
  team     Team   @relation(fields: [teamCode], references: [code], onDelete: Cascade)
  teamCode String @map("team_code") @db.VarChar(20)

  @@id([userId, teamCode])
  @@map("user_team")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique @db.VarChar(30)
  description String?          @db.VarChar(255)
  teams       TeamPermission[]

  @@map("permission")
}

model TeamPermission {
  permission     Permission @relation(fields: [permissionName], references: [name], onDelete: Cascade)
  permissionName String     @map("permission_name")
  team           Team       @relation(fields: [teamCode], references: [code], onDelete: Cascade)
  teamCode       String     @map("team_code") @db.VarChar(20)

  @@id([permissionName, teamCode])
  @@map("team_permission")
}

model Transaction {
  id        Int             @id @default(autoincrement())
  type      TransactionType @default(TRANSFER)
  from      Int
  payor     User            @relation("from", fields: [from], references: [id])
  to        Int
  payee     User            @relation("to", fields: [to], references: [id])
  amount    Int
  context   String          @default("") @db.VarChar(255)
  createdAt DateTime        @default(now()) @map("created_at")
  isDeleted Boolean         @default(false) @map("is_deleted")

  @@map("transaction")
}

model Contribution {
  adherentId     Int      @map("adherent_id")
  adherent       User     @relation(fields: [adherentId], references: [id], onDelete: Cascade)
  edition        Int
  expirationDate DateTime @map("expiration_date")
  paymentDate    DateTime @default(now()) @map("payment_date")
  amount         Int      @default(100)

  @@id([adherentId, edition])
  @@map("contribution")
}

model SignaLocation {
  id                 Int                @id @default(autoincrement())
  name               String             @db.VarChar(255)
  geoJson            Json?              @map("geo_json")
  fts                Ft[]
  festivalActivities FestivalActivity[]
  FestivalTask       FestivalTask[]

  @@map("signa_location")
}

model CatalogCategory {
  id             Int               @id @default(autoincrement())
  name           String
  path           String            @unique
  parent         Int?
  parentCategory CatalogCategory?  @relation("parent", fields: [parent], references: [id])
  subCategories  CatalogCategory[] @relation("parent")
  gears          CatalogGear[]     @relation("category")
  owner          Team?             @relation("owner", fields: [ownerCode], references: [code])
  ownerCode      String?           @map("owner_code") @db.VarChar(20)

  @@map("catalog_category")
}

model CatalogGear {
  id                        Int                              @id @default(autoincrement())
  name                      String
  slug                      String                           @unique
  categoryId                Int?                             @map("category_id")
  category                  CatalogCategory?                 @relation("category", fields: [categoryId], references: [id])
  isPonctualUsage           Boolean                          @default(false) @map("is_ponctual_usage")
  isConsumable              Boolean                          @default(false) @map("is_consumable")
  inventoryRecords          InventoryRecord[]                @relation()
  festivalActivityInquiries FestivalActivityInquiryRequest[] @relation("activity-inquiry-request-catalog")
  festivalTaskInquiries     FestivalTaskInquiryRequest[]     @relation("task-inquiry-request-catalog")

  @@index([isPonctualUsage])
  @@map("catalog_gear")
}

model Configuration {
  key   String @id @unique
  value Json

  @@map("configuration")
}

enum FtStatus {
  DRAFT
  SUBMITTED
  VALIDATED
  REFUSED
  READY

  @@map("ft_status")
}

enum TaskCategory {
  STATIQUE
  BAR
  MANUTENTION
  FUN
  RELOU

  @@map("task_category")
}

model Ft {
  id         Int               @id @default(autoincrement())
  name       String
  status     FtStatus          @default(DRAFT)
  fa         FestivalActivity? @relation(fields: [parentFaId], references: [id])
  parentFaId Int?              @map("parent_fa_id")

  isStatic       Boolean        @default(false) @map("is_static")
  description    String?        @db.Text
  userInCharge   User?          @relation(fields: [userInChargeId], references: [id], name: "inCharge")
  userInChargeId Int?           @map("user_in_charge_id")
  team           Team?          @relation(fields: [teamCode], references: [code])
  teamCode       String?        @map("team_code") @db.VarChar(20)
  location       SignaLocation? @relation(fields: [locationId], references: [id])
  locationId     Int?           @map("location_id")
  isDeleted      Boolean        @default(false) @map("is_deleted")
  reviewerId     Int?           @map("reviewer_id")
  reviewer       User?          @relation("reviewer", fields: [reviewerId], references: [id])
  hasPriority    Boolean?       @default(false) @map("has_priority")
  category       TaskCategory?

  feedbacks   FtFeedback[]
  timeWindows FtTimeWindow[]
  reviews     FtReview[]

  @@map("ft")
}

enum FtFeedbackSubjectType {
  REFUSED
  SUBMIT
  VALIDATED
  COMMENT
  READY

  @@map("ft_feedback_subject_type")
}

model FtFeedback {
  id        Int                   @id @default(autoincrement())
  ft        Ft                    @relation(fields: [ftId], references: [id], onDelete: Cascade)
  ftId      Int                   @map("ft_id")
  comment   String                @db.Text
  subject   FtFeedbackSubjectType
  author    User                  @relation(fields: [authorId], references: [id])
  authorId  Int                   @map("author_id")
  createdAt DateTime              @default(now()) @map("created_at")

  @@map("ft_feedback")
}

model FtTimeWindow {
  id           Int             @id @default(autoincrement())
  ft           Ft              @relation(fields: [ftId], references: [id], onDelete: Cascade)
  ftId         Int             @map("ft_id")
  start        DateTime
  end          DateTime
  sliceTime    Float?          @map("slice_time")
  userRequests FtUserRequest[]
  teamRequests FtTeamRequest[]
  timeSpans    FtTimeSpan[]

  @@index([start(sort: Asc)])
  @@index([end(sort: Desc)])
  @@map("ft_time_window")
}

model FtUserRequest {
  id              Int          @id @default(autoincrement())
  ftTimeWindows   FtTimeWindow @relation(fields: [ftTimeWindowsId], references: [id], onDelete: Cascade)
  ftTimeWindowsId Int          @map("ft_time_window_id")
  user            User         @relation(fields: [userId], references: [id])
  userId          Int          @map("user_id")

  assignments Assignment[]

  @@unique([ftTimeWindowsId, userId])
  @@map("ft_user_request")
}

model FtTeamRequest {
  id            Int          @id @default(autoincrement())
  timeWindows   FtTimeWindow @relation(fields: [timeWindowsId], references: [id], onDelete: Cascade)
  timeWindowsId Int          @map("ft_time_window_id")
  quantity      Int
  team          Team         @relation(fields: [teamCode], references: [code], onDelete: Cascade)
  teamCode      String       @map("team_code") @db.VarChar(20)
  assignments   Assignment[]

  @@unique([timeWindowsId, teamCode])
  @@map("ft_team_request")
}

model FtTimeSpan {
  id           Int          @id @default(autoincrement())
  timeWindow   FtTimeWindow @relation(fields: [timeWindowId], references: [id], onDelete: Cascade)
  timeWindowId Int          @map("ft_time_window_id")
  start        DateTime
  end          DateTime

  assignments Assignment[]

  @@unique([timeWindowId, start, end])
  @@index([start(sort: Asc)])
  @@index([end(sort: Desc)])
  @@index([start(sort: Asc), end(sort: Asc)])
  @@map("ft_time_span")
}

model Assignment {
  id            Int            @id @default(autoincrement())
  timeSpanId    Int            @map("time_span_id")
  timeSpan      FtTimeSpan     @relation(fields: [timeSpanId], references: [id], onDelete: Cascade)
  userRequest   FtUserRequest? @relation(fields: [userRequestId], references: [id], onDelete: Cascade)
  userRequestId Int?           @map("user_request_id")
  teamRequest   FtTeamRequest? @relation(fields: [teamRequestId], references: [id], onDelete: Cascade)
  teamRequestId Int?           @map("team_request_id")
  assignee      User           @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  assigneeId    Int            @map("assignee_id")

  @@unique([timeSpanId, assigneeId])
  @@map("assignment")
}

enum ReviewStatus {
  VALIDATED
  REFUSED

  @@map("review_status")
}

model FtReview {
  ft       Ft           @relation(fields: [ftId], references: [id], onDelete: Cascade)
  ftId     Int          @map("ft_id")
  team     Team         @relation(fields: [teamCode], references: [code], onDelete: Cascade)
  teamCode String       @map("team_code") @db.VarChar(20)
  status   ReviewStatus

  @@unique([ftId, teamCode])
  @@map("ft_review")
}

model InventoryRecord {
  gear     CatalogGear @relation(fields: [gearId], references: [id], onDelete: Cascade)
  gearId   Int         @map("gear_id")
  storage  String
  quantity Int

  @@unique([gearId, storage])
  @@map("inventory_record")
}

model CharismaPeriod {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  @db.Text
  charisma    Int      @default(5)
  start       DateTime
  end         DateTime

  @@index([start(sort: Asc)])
  @@index([end(sort: Asc)])
  @@index([start(sort: Asc), end(sort: Asc)])
  @@map("charisma_period")
}

model VolunteerAvailability {
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int      @map("user_id")
  start  DateTime
  end    DateTime

  @@unique([userId, start, end])
  @@index([start(sort: Asc)])
  @@index([end(sort: Asc)])
  @@index([start(sort: Asc), end(sort: Asc)])
  @@map("volunteer_availability")
}

model Friend {
  requestor   User @relation("friend_requestor", fields: [requestorId], references: [id], onDelete: Cascade)
  requestorId Int  @map("requestor_id")
  friend      User @relation("friend", fields: [friendId], references: [id], onDelete: Cascade)
  friendId    Int  @map("friend_id")

  @@id([requestorId, friendId])
  @@map("friend")
}

model CatalogSignage {
  id                       Int                       @id @default(autoincrement())
  name                     String                    @db.VarChar(40)
  slug                     String                    @unique @db.VarChar(40)
  type                     SignageType
  image                    String?
  festivalActivityRequests FestivalActivitySignage[]

  @@map("catalog_signage")
}

model Barrel {
  slug  String @id
  drink String
  price Int

  @@map("barrel")
}

model FestivalActivity {
  id            Int                        @unique
  status        FestivalActivityStatus
  isDeleted     Boolean                    @default(false) @map("is_deleted")
  reviews       FestivalActivityReview[]
  feedbacks     FestivalActivityFeedback[]
  events        FestivalActivityHistory[]
  fts           Ft[] // TO REMOVE
  festivalTasks FestivalTask[]

  // General
  name               String                              @db.Text
  description        String?                             @db.Text
  toPublish          Boolean                             @map("to_publish")
  photoLink          String?                             @map("photo_link") @db.Text
  isFlagship         Boolean                             @map("is_flagship")
  categories         String[]                            @db.Text
  generalTimeWindows FestivalActivityTimeWindowGeneral[]

  // In charge
  teamCode    String?      @map("team_code") @db.VarChar(20)
  team        Team?        @relation(fields: [teamCode], references: [code])
  adherent    User?        @relation(fields: [adherentId], references: [id])
  adherentId  Int?         @map("adherent_id")
  contractors Contractor[]

  // Signa
  location   SignaLocation?            @relation(fields: [locationId], references: [id])
  locationId Int?                      @map("location_id")
  signages   FestivalActivitySignage[]

  // Security
  specialNeed String? @map("special_need") @db.Text
  freePass    Int     @default(0) @map("free_pass")

  // Supply
  electricity FestivalActivityElectricitySupply[]
  water       String?                             @db.Text

  // Inquiry
  inquiryTimeWindows FestivalActivityTimeWindowInquiry[]
  inquiries          FestivalActivityInquiryRequest[]

  @@map("festival_activity")
}

enum FestivalActivityStatus {
  DRAFT
  IN_REVIEW
  VALIDATED
  REFUSED

  @@map("festival_activity_status")
}

model FestivalActivityTimeWindowGeneral {
  id    String
  start DateTime
  end   DateTime

  faId Int              @map("fa_id")
  fa   FestivalActivity @relation(fields: [faId], references: [id], onDelete: Cascade)

  @@id([faId, id])
  @@map("festival_activity_time_window_general")
}

model FestivalActivityTimeWindowInquiry {
  id    String
  start DateTime
  end   DateTime

  faId Int              @map("fa_id")
  fa   FestivalActivity @relation(fields: [faId], references: [id], onDelete: Cascade)

  @@id([faId, id])
  @@map("festival_activity_time_window_inquiry")
}

model Contractor {
  id        Int
  firstname String  @db.Text
  lastname  String  @db.Text
  phone     String  @db.Text
  email     String? @db.Text
  company   String? @db.Text
  comment   String? @db.Text

  fa   FestivalActivity @relation(fields: [faId], references: [id])
  faId Int              @map("fa_id")

  @@unique([faId, id])
  @@map("contractor")
}

model FestivalActivitySignage {
  id       String      @db.Text
  quantity Int
  text     String      @db.Text
  size     String      @db.Text
  type     SignageType
  comment  String?     @db.Text

  catalogItem   CatalogSignage? @relation(fields: [catalogItemId], references: [id])
  catalogItemId Int?

  fa   FestivalActivity @relation(fields: [faId], references: [id], onDelete: Cascade)
  faId Int              @map("fa_id")

  @@id([faId, id])
  @@map("festival_activity_signage")
}

enum SignageType {
  BACHE
  PANNEAU
  AFFICHE

  @@map("signage_type")
}

model FestivalActivityElectricitySupply {
  id         String                @db.Text
  connection ElectricityConnection
  device     String                @db.Text
  power      Int
  count      Int
  comment    String?               @db.Text

  fa   FestivalActivity @relation(fields: [faId], references: [id], onDelete: Cascade)
  faId Int              @map("festival_supply_id")

  @@id([faId, id])
  @@map("festival_activity_electricity_supply")
}

enum ElectricityConnection {
  PC16_Prise_classique
  P17_16A_MONO
  P17_16A_TRI
  P17_16A_TETRA
  P17_32A_MONO
  P17_32A_TRI
  P17_32A_TETRA
  P17_63A_MONO
  P17_63A_TRI
  P17_63A_TETRA
  P17_125A_TETRA

  @@map("electricity_connection")
}

model FestivalActivityInquiryRequest {
  slug        String      @db.Text
  catalogItem CatalogGear @relation("activity-inquiry-request-catalog", fields: [slug], references: [slug], onDelete: Cascade)
  quantity    Int
  drive       String?

  fa   FestivalActivity @relation(fields: [faId], references: [id], onDelete: Cascade)
  faId Int              @map("fa_id")

  @@id([slug, faId])
  @@map("festival_activity_inquiry_request")
}

model FestivalActivityReview {
  team   FestivalActivityReviewer
  status FestivalActivityReviewStatus

  faId Int              @map("fa_id")
  fa   FestivalActivity @relation(fields: [faId], references: [id], onDelete: Cascade)

  @@id([faId, team])
  @@map("festival_activity_review")
}

enum FestivalActivityReviewer {
  humain
  signa
  secu
  matos
  elec
  barrieres
  communication

  @@map("festival_activity_reviewer")
}

enum FestivalActivityReviewStatus {
  REVIEWING
  NOT_ASKING_TO_REVIEW
  APPROVED
  REJECTED

  @@map("festival_activity_review_status")
}

model FestivalActivityHistory {
  id           Int                   @id @default(autoincrement())
  event        FestivalActivityEvent
  instigatorId Int
  instigator   User                  @relation(fields: [instigatorId], references: [id], onDelete: Cascade)
  faId         Int                   @map("fa_id")
  fa           FestivalActivity      @relation(fields: [faId], references: [id], onDelete: Cascade)
  snapshot     Json
  at           DateTime
  context      String?               @db.Text

  @@unique([faId, event, instigatorId, at])
  @@map("festival_activity_history")
}

enum FestivalActivityEvent {
  CREATED
  READY_TO_REVIEW
  APPROVED
  REJECTED
  COMMENTED

  @@map("festival_activity_event")
}

model FestivalActivityFeedback {
  content     String   @db.Text
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int      @map("author_id")
  publishedAt DateTime @default(now()) @map("published_at")

  fa   FestivalActivity @relation(fields: [faId], references: [id], onDelete: Cascade)
  faId Int              @map("fa_id")

  @@id([faId, authorId, publishedAt])
  @@map("festival_activity_feedback")
}

model FestivalTask {
  id        Int                    @unique
  status    FestivalTaskStatus
  isDeleted Boolean                @default(false) @map("is_deleted")
  feedbacks FestivalTaskFeedback[]
  events    FestivalTaskHistory[]

  // Review
  reviews    FestivalTaskReview[]
  reviewerId Int?                 @map("reviewer_id")
  reviewer   User?                @relation("task-reviewer", fields: [reviewerId], references: [id])

  // General
  name            String  @db.Text
  administrator   User    @relation(fields: [administratorId], references: [id], "task-administrator")
  administratorId Int     @map("administrator_id")
  team            Team?   @relation(fields: [teamCode], references: [code])
  teamCode        String? @map("team_code") @db.VarChar(20)

  // Festival activity
  festivalActivity   FestivalActivity? @relation(fields: [festivalActivityId], references: [id])
  festivalActivityId Int?              @map("festival_activity_id")

  // Instructions
  appointment         SignaLocation?                  @relation(fields: [appointmentId], references: [id])
  appointmentId       Int?                            @map("appointment_id")
  globalInstruction   String?                         @map("global_instruction") @db.Text
  contacts            FestivalTaskContact[]
  inChargeInstruction String?                         @map("in_charge_instruction") @db.Text
  inChargeVolunteers  FestivalTaskInChargeVolunteer[]
  inquiries           FestivalTaskInquiryRequest[]

  mobilizations FestivalTaskMobilization[]

  @@map("festival_task")
}

enum FestivalTaskStatus {
  DRAFT
  IN_REVIEW
  REFUSED
  VALIDATED

  @@map("festival_task_status")
}

model FestivalTaskContact {
  contact        User         @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId      Int          @map("contact_id")
  festivalTask   FestivalTask @relation(fields: [festivalTaskId], references: [id], onDelete: Cascade)
  festivalTaskId Int          @map("festival_task_id")

  @@id([contactId, festivalTaskId])
  @@map("festival_task_contact")
}

model FestivalTaskInChargeVolunteer {
  volunteer      User         @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  volunteerId    Int          @map("volunteer_id")
  festivalTask   FestivalTask @relation(fields: [festivalTaskId], references: [id], onDelete: Cascade)
  festivalTaskId Int          @map("festival_task_id")

  @@id([volunteerId, festivalTaskId])
  @@map("festival_task_in_charge_volunteer")
}

model FestivalTaskMobilization {
  id                  String
  start               DateTime
  end                 DateTime
  volunteers          FestivalTaskMobilizationVolunteer[]
  teams               FestivalTaskMobilizationTeam[]
  durationSplitInHour Int?                                @map("duration_split_in_hour")

  ftId Int          @map("ft_id")
  ft   FestivalTask @relation(fields: [ftId], references: [id], onDelete: Cascade)

  @@id([ftId, id])
  @@map("festival_task_mobilization")
}

model FestivalTaskMobilizationVolunteer {
  volunteer        User                     @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  volunteerId      Int                      @map("volunteer_id")
  mobilization     FestivalTaskMobilization @relation(fields: [mobilizationId, mobilizationftId], references: [id, ftId], onDelete: Cascade)
  mobilizationId   String                   @map("mobilization_id")
  mobilizationftId Int                      @map("mobilization_ft_id")

  @@id([volunteerId, mobilizationId, mobilizationftId])
  @@map("festival_task_moblilization_volunteer")
}

model FestivalTaskMobilizationTeam {
  count            Int
  team             Team                     @relation(fields: [teamCode], references: [code], onDelete: Cascade)
  teamCode         String                   @map("team_code")
  mobilization     FestivalTaskMobilization @relation(fields: [mobilizationId, mobilizationftId], references: [id, ftId], onDelete: Cascade)
  mobilizationId   String                   @map("mobilization_id")
  mobilizationftId Int                      @map("mobilization_ft_id")

  @@id([teamCode, mobilizationId, mobilizationftId])
  @@map("festival_task_mobilization_team")
}

model FestivalTaskInquiryRequest {
  slug        String      @db.Text
  catalogItem CatalogGear @relation("task-inquiry-request-catalog", fields: [slug], references: [slug], onDelete: Cascade)
  quantity    Int
  drive       String?

  ft   FestivalTask @relation(fields: [ftId], references: [id], onDelete: Cascade)
  ftId Int          @map("ft_id")

  @@id([slug, ftId])
  @@map("festival_task_inquiry_request")
}

model FestivalTaskHistory {
  id           Int               @id @default(autoincrement())
  event        FestivalTaskEvent
  instigatorId Int               @map("instigator_id")
  instigator   User              @relation(fields: [instigatorId], references: [id], onDelete: Cascade)
  ftId         Int               @map("ft_id")
  ft           FestivalTask      @relation(fields: [ftId], references: [id], onDelete: Cascade)
  snapshot     Json
  at           DateTime
  context      String?           @db.Text

  @@unique([ftId, event, instigatorId, at])
  @@map("festival_task_history")
}

enum FestivalTaskEvent {
  CREATED
  COMMENTED
  READY_TO_REVIEW
  REJECTED
  APPROVED

  @@map("festival_task_event")
}

model FestivalTaskFeedback {
  content     String   @db.Text
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int      @map("author_id")
  publishedAt DateTime @default(now()) @map("published_at")

  ft   FestivalTask @relation(fields: [ftId], references: [id], onDelete: Cascade)
  ftId Int          @map("ft_id")

  @@id([ftId, authorId, publishedAt])
  @@map("festival_task_feedback")
}

enum FestivalTaskReviewer {
  humain
  matos
  elec

  @@map("festival_task_reviewer")
}

enum FestivalTaskReviewStatus {
  REVIEWING
  NOT_ASKING_TO_REVIEW
  REJECTED
  APPROVED

  @@map("festival_task_review_status")
}

model FestivalTaskReview {
  team   FestivalTaskReviewer
  status FestivalTaskReviewStatus

  ftId Int          @map("ft_id")
  ft   FestivalTask @relation(fields: [ftId], references: [id], onDelete: Cascade)

  @@id([ftId, team])
  @@map("festival_task_review")
}

model SharedMeal {
  id      Int       @id @default(autoincrement())
  menu    String    @db.Text
  date    String    @db.Text
  chefId  Int       @map("chef_id")
  chef    User      @relation("chef", fields: [chefId], references: [id])
  amount  Int?
  payedAt DateTime? @map("payed_at")

  shotguns Shotgun[]

  @@map("shared_meal")
}

model Shotgun {
  guestId Int        @map("guest_id")
  guest   User       @relation("guest", fields: [guestId], references: [id])
  mealId  Int        @map("meal_id")
  meal    SharedMeal @relation(fields: [mealId], references: [id])
  date    DateTime

  @@id([guestId, mealId])
  @@map("shotgun")
}
