// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  DEPOSIT
  TRANSFER
  BARREL
  PROVISIONS

  @@map("transaction_type")
}

model User {
  id                   Int       @id @default(autoincrement())
  firstname            String    @db.VarChar(30)
  lastname             String    @db.VarChar(30)
  nickname             String?   @db.VarChar(30)
  email                String    @unique
  birthdate            DateTime
  phone                String    @db.VarChar(30)
  comment              String?
  resetPasswordToken   String?   @unique @map("reset_password_token")
  resetPasswordExpires DateTime? @map("reset_password_expires")
  profilePicture       String?   @map("profile_picture")
  charisma             Int       @default(0)
  balance              Int       @default(0)
  password             String    @default("")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  isDeleted            Boolean   @default(false) @map("is_deleted")

  teams UserTeam[]

  transactionsFrom Transaction[] @relation("from")
  transactionsTo   Transaction[] @relation("to")

  faInCharge  Fa[]         @relation("in_charge")
  faFeedbacks FaFeedback[]

  ftsInCharge      Ft[]                    @relation("inCharge")
  ftFeedbacks      FtFeedback[]
  ftUserRequests   FtUserRequest[]
  availabilities   VolunteerAvailability[]
  friendRequestors Friend[]                @relation("friend_requestor")
  friends          Friend[]                @relation("friend")
  ftsInReview      Ft[]                    @relation("reviewer")

  assignments   Assignment[]
  contributions Contribution[]
  notifications Notification[]

  @@map("user")
}

model Notification {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @id

  @@map("notification")
}

model Team {
  code  String @id @unique @db.VarChar(20)
  name  String @unique @db.VarChar(30)
  color String @default("#000000") @db.VarChar(30)
  icon  String @default("mdi-circle") @db.VarChar(255)

  users           UserTeam[]
  fa              Fa[]
  ownedCategories CatalogCategory[] @relation("owner")
  ftRequests      FtTeamRequest[]
  ftReviews       FtReview[]
  permissions     TeamPermission[]
  ft              Ft[]

  @@map("team")
}

model UserTeam {
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int    @map("user_id")
  team     Team   @relation(fields: [teamCode], references: [code], onDelete: Cascade)
  teamCode String @map("team_code") @db.VarChar(20)

  @@id([userId, teamCode])
  @@map("user_team")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique @db.VarChar(30)
  description String?          @db.VarChar(255)
  teams       TeamPermission[]

  @@map("permission")
}

model TeamPermission {
  permission     Permission @relation(fields: [permissionName], references: [name], onDelete: Cascade)
  permissionName String     @map("permission_name")
  team           Team       @relation(fields: [teamCode], references: [code], onDelete: Cascade)
  teamCode       String     @map("team_code") @db.VarChar(20)

  @@id([permissionName, teamCode])
  @@map("team_permission")
}

model Transaction {
  id        Int             @id @default(autoincrement())
  type      TransactionType @default(TRANSFER)
  from      Int
  payor     User            @relation("from", fields: [from], references: [id])
  to        Int
  payee     User            @relation("to", fields: [to], references: [id])
  amount    Int
  context   String          @default("") @db.VarChar(255)
  createdAt DateTime        @default(now()) @map("created_at")
  isDeleted Boolean         @default(false) @map("is_deleted")

  @@map("transaction")
}

model Contribution {
  adherentId     Int      @map("adherent_id")
  adherent       User     @relation(fields: [adherentId], references: [id], onDelete: Cascade)
  edition        Int
  expirationDate DateTime @map("expiration_date")
  paymentDate    DateTime @default(now()) @map("payment_date")
  amount         Int      @default(100)

  @@id([adherentId, edition])
  @@map("contribution")
}

enum FaStatus {
  DRAFT
  SUBMITTED
  VALIDATED
  REFUSED

  @@map("fa_status")
}

model Fa {
  id               Int                 @id @default(autoincrement())
  name             String              @db.VarChar(255)
  type             FaType?
  userInCharge     User?               @relation(fields: [userInChargeId], references: [id], name: "in_charge")
  userInChargeId   Int?                @map("user_in_charge_id")
  team             Team?               @relation(fields: [teamCode], references: [code])
  teamCode         String?             @map("team_code") @db.VarChar(20)
  createdAt        DateTime?           @default(now()) @map("created_at")
  location         SignaLocation?      @relation(fields: [locationId], references: [id])
  locationId       Int?                @map("location_id")
  status           FaStatus            @default(DRAFT)
  description      String?             @db.Text
  securityNeed     String?             @map("security_need") @db.Text
  numberOfPass     Int?                @map("number_of_pass")
  waterNeed        String?             @map("water_need") @db.Text
  isDeleted        Boolean             @default(false) @map("is_deleted")
  electricityNeeds FaElectricityNeed[]
  signaNeeds       FaSignaNeed[]
  feedbacks        FaFeedback[]
  timeWindows      FaTimeWindow[]
  gearRequests     GearRequest[]       @relation("gear-request-animation")
  publicAnimation  PublicAnimation?
  fts              Ft[]
  collaborator     Collaborator?       @relation(fields: [collaboratorId], references: [id])
  collaboratorId   Int?                @map("collaborator_id")

  @@map("fa")
}

enum FaType {
  Concert
  Course
  Divertissement
  Initiation
  Tournoi
  Vente
  Prevention
  Spectacle
  Autre

  @@map("fa_type")
}

model SignaLocation {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  geoJson Json?  @map("geo_json")
  fas     Fa[]
  fts     Ft[]

  @@map("signa_location")
}

model Collaborator {
  id        Int     @id @default(autoincrement())
  firstname String  @db.VarChar(30)
  lastname  String  @db.VarChar(30)
  phone     String  @db.VarChar(30)
  email     String? @db.VarChar(60)
  company   String? @db.VarChar(30)
  comment   String? @db.Text
  fas       Fa[]

  @@unique([firstname, lastname])
  @@map("collaborator")
}

//A d√©finir correctement plus tard, placeholder pour le moment
enum ElectricityType {
  PC16_Prise_classique
  P17_16A_MONO
  P17_16A_TRI
  P17_16A_TETRA
  P17_32A_MONO
  P17_32A_TRI
  P17_32A_TETRA
  P17_63A_MONO
  P17_63A_TRI
  P17_63A_TETRA
  P17_125A_TETRA

  @@map("electricity_type")
}

model FaElectricityNeed {
  id              Int             @id @default(autoincrement())
  fa              Fa              @relation(fields: [faId], references: [id])
  faId            Int             @map("fa_id")
  electricityType ElectricityType @map("electricity_type")
  device          String          @db.Text
  power           Int             @default(1)
  count           Int             @default(1)
  comment         String?         @db.Text

  @@map("fa_electricity_need")
}

enum SignaType {
  BACHE
  PANNEAU
  AFFICHE

  @@map("signa_type")
}

model FaSignaNeed {
  id        Int       @id @default(autoincrement())
  fa        Fa        @relation(fields: [faId], references: [id])
  faId      Int       @map("fa_id")
  signaType SignaType @map("signa_type")
  text      String    @db.Text
  count     Int       @default(1)
  size      String?   @db.VarChar(50)
  comment   String?   @db.Text

  @@map("fa_signa_need")
}

enum FaFeedbackSubjectType {
  REFUSED
  SUBMIT
  VALIDATED
  COMMENT

  @@map("fa_feedback_subject_type")
}

model FaFeedback {
  id        Int                   @id @default(autoincrement())
  fa        Fa                    @relation(fields: [faId], references: [id])
  faId      Int                   @map("fa_id")
  comment   String                @db.Text
  subject   FaFeedbackSubjectType
  author    User                  @relation(fields: [authorId], references: [id])
  authorId  Int                   @map("author_id")
  createdAt DateTime              @default(now()) @map("created_at")

  @@map("fa_feedback")
}

model PublicAnimation {
  fa          Fa                  @relation(fields: [faId], references: [id], onDelete: Cascade)
  faId        Int                 @id @map("fa_id")
  photoLink   String              @default("") @map("photo_link") @db.Text
  description String              @default("") @db.Text
  isFlagship  Boolean             @default(false) @map("is_flagship")
  categories  AnimationCategory[]

  @@map("public_animation")
}

enum AnimationCategory {
  Divertissement
  Culture
  Sport
  Enfant
  Autre

  @@map("animation_category")
}

model FaTimeWindow {
  id    Int      @id @default(autoincrement())
  fa    Fa       @relation(fields: [faId], references: [id])
  faId  Int      @map("fa_id")
  start DateTime
  end   DateTime

  @@map("fa_time_window")
}

model CatalogCategory {
  id             Int               @id @default(autoincrement())
  name           String
  path           String            @unique
  parent         Int?
  parentCategory CatalogCategory?  @relation("parent", fields: [parent], references: [id])
  subCategories  CatalogCategory[] @relation("parent")
  gears          CatalogGear[]     @relation("category")
  owner          Team?             @relation("owner", fields: [ownerCode], references: [code])
  ownerCode      String?           @map("owner_code") @db.VarChar(20)

  @@map("catalog_category")
}

model CatalogGear {
  id               Int               @id @default(autoincrement())
  name             String
  slug             String            @unique
  categoryId       Int?              @map("category_id")
  category         CatalogCategory?  @relation("category", fields: [categoryId], references: [id])
  requests         GearRequest[]     @relation("gear-request-gear")
  isPonctualUsage  Boolean           @default(false) @map("is_ponctual_usage")
  isConsumable     Boolean           @default(false) @map("is_consumable")
  inventoryRecords InventoryRecord[] @relation()

  @@index([isPonctualUsage])
  @@map("catalog_gear")
}

model Configuration {
  key   String @id @unique
  value Json

  @@map("configuration")
}

model Period {
  id          Int           @id @default(autoincrement())
  start       DateTime
  end         DateTime
  gearRequest GearRequest[] @relation("gear-request-rental-period")

  @@index([start, end])
  @@map("period")
}

model GearRequest {
  animationId    Int?        @map("animation_id")
  animation      Fa?         @relation("gear-request-animation", fields: [animationId], references: [id], onDelete: Cascade)
  taskId         Int?        @map("task_id")
  task           Ft?         @relation("gear-request-task", fields: [taskId], references: [id], onDelete: Cascade)
  rentalPeriodId Int         @map("rental_period_id")
  rentalPeriod   Period      @relation("gear-request-rental-period", fields: [rentalPeriodId], references: [id], onDelete: Cascade)
  gearId         Int         @map("gear_id")
  gear           CatalogGear @relation("gear-request-gear", fields: [gearId], references: [id], onDelete: Cascade)
  quantity       Int
  status         String
  drive          String?

  @@unique([gearId, rentalPeriodId])
  @@index([status])
  @@map("gear_request")
}

enum FtStatus {
  DRAFT
  SUBMITTED
  VALIDATED
  REFUSED
  READY

  @@map("ft_status")
}

enum TaskCategory {
  STATIQUE
  BAR
  MANUTENTION
  FUN
  RELOU

  @@map("task_category")
}

model Ft {
  id             Int            @id @default(autoincrement())
  name           String
  status         FtStatus       @default(DRAFT)
  fa             Fa?            @relation(fields: [parentFaId], references: [id])
  parentFaId     Int?           @map("parent_fa_id")
  isStatic       Boolean        @default(false) @map("is_static")
  description    String?        @db.Text
  userInCharge   User?          @relation(fields: [userInChargeId], references: [id], name: "inCharge")
  userInChargeId Int?           @map("user_in_charge_id")
  team           Team?          @relation(fields: [teamCode], references: [code])
  teamCode       String?        @map("team_code") @db.VarChar(20)
  location       SignaLocation? @relation(fields: [locationId], references: [id])
  locationId     Int?           @map("location_id")
  isDeleted      Boolean        @default(false) @map("is_deleted")
  reviewerId     Int?           @map("reviewer_id")
  reviewer       User?          @relation("reviewer", fields: [reviewerId], references: [id])
  hasPriority    Boolean?       @default(false) @map("has_priority")
  category       TaskCategory?

  feedbacks    FtFeedback[]
  timeWindows  FtTimeWindow[]
  reviews      FtReview[]
  gearRequests GearRequest[]  @relation("gear-request-task")

  @@map("ft")
}

enum FtFeedbackSubjectType {
  REFUSED
  SUBMIT
  VALIDATED
  COMMENT
  READY

  @@map("ft_feedback_subject_type")
}

model FtFeedback {
  id        Int                   @id @default(autoincrement())
  ft        Ft                    @relation(fields: [ftId], references: [id], onDelete: Cascade)
  ftId      Int                   @map("ft_id")
  comment   String                @db.Text
  subject   FtFeedbackSubjectType
  author    User                  @relation(fields: [authorId], references: [id])
  authorId  Int                   @map("author_id")
  createdAt DateTime              @default(now()) @map("created_at")

  @@map("ft_feedback")
}

model FtTimeWindow {
  id           Int             @id @default(autoincrement())
  ft           Ft              @relation(fields: [ftId], references: [id], onDelete: Cascade)
  ftId         Int             @map("ft_id")
  start        DateTime
  end          DateTime
  sliceTime    Float?          @map("slice_time")
  userRequests FtUserRequest[]
  teamRequests FtTeamRequest[]
  timeSpans    FtTimeSpan[]

  @@index([start(sort: Asc)])
  @@index([end(sort: Desc)])
  @@map("ft_time_window")
}

model FtUserRequest {
  id              Int          @id @default(autoincrement())
  ftTimeWindows   FtTimeWindow @relation(fields: [ftTimeWindowsId], references: [id], onDelete: Cascade)
  ftTimeWindowsId Int          @map("ft_time_window_id")
  user            User         @relation(fields: [userId], references: [id])
  userId          Int          @map("user_id")

  assignments Assignment[]

  @@unique([ftTimeWindowsId, userId])
  @@map("ft_user_request")
}

model FtTeamRequest {
  id            Int          @id @default(autoincrement())
  timeWindows   FtTimeWindow @relation(fields: [timeWindowsId], references: [id], onDelete: Cascade)
  timeWindowsId Int          @map("ft_time_window_id")
  quantity      Int
  team          Team         @relation(fields: [teamCode], references: [code], onDelete: Cascade)
  teamCode      String       @map("team_code") @db.VarChar(20)
  assignments   Assignment[]

  @@unique([timeWindowsId, teamCode])
  @@map("ft_team_request")
}

model FtTimeSpan {
  id           Int          @id @default(autoincrement())
  timeWindow   FtTimeWindow @relation(fields: [timeWindowId], references: [id], onDelete: Cascade)
  timeWindowId Int          @map("ft_time_window_id")
  start        DateTime
  end          DateTime

  assignments Assignment[]

  @@unique([timeWindowId, start, end])
  @@index([start(sort: Asc)])
  @@index([end(sort: Desc)])
  @@index([start(sort: Asc), end(sort: Asc)])
  @@map("ft_time_span")
}

model Assignment {
  id            Int            @id @default(autoincrement())
  timeSpanId    Int            @map("time_span_id")
  timeSpan      FtTimeSpan     @relation(fields: [timeSpanId], references: [id], onDelete: Cascade)
  userRequest   FtUserRequest? @relation(fields: [userRequestId], references: [id], onDelete: Cascade)
  userRequestId Int?           @map("user_request_id")
  teamRequest   FtTeamRequest? @relation(fields: [teamRequestId], references: [id], onDelete: Cascade)
  teamRequestId Int?           @map("team_request_id")
  assignee      User           @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  assigneeId    Int            @map("assignee_id")

  @@unique([timeSpanId, assigneeId])
  @@map("assignment")
}

enum ReviewStatus {
  VALIDATED
  REFUSED

  @@map("review_status")
}

model FtReview {
  ft       Ft           @relation(fields: [ftId], references: [id], onDelete: Cascade)
  ftId     Int          @map("ft_id")
  team     Team         @relation(fields: [teamCode], references: [code], onDelete: Cascade)
  teamCode String       @map("team_code") @db.VarChar(20)
  status   ReviewStatus

  @@unique([ftId, teamCode])
  @@map("ft_review")
}

model InventoryRecord {
  gear     CatalogGear @relation(fields: [gearId], references: [id], onDelete: Cascade)
  gearId   Int         @map("gear_id")
  storage  String
  quantity Int

  @@unique([gearId, storage])
  @@map("inventory_record")
}

model CharismaPeriod {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  @db.Text
  charisma    Int      @default(5)
  start       DateTime
  end         DateTime

  @@index([start(sort: Asc)])
  @@index([end(sort: Asc)])
  @@index([start(sort: Asc), end(sort: Asc)])
  @@map("charisma_period")
}

model VolunteerAvailability {
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int      @map("user_id")
  start  DateTime
  end    DateTime

  @@unique([userId, start, end])
  @@index([start(sort: Asc)])
  @@index([end(sort: Asc)])
  @@index([start(sort: Asc), end(sort: Asc)])
  @@map("volunteer_availability")
}

model Friend {
  requestor   User @relation("friend_requestor", fields: [requestorId], references: [id], onDelete: Cascade)
  requestorId Int  @map("requestor_id")
  friend      User @relation("friend", fields: [friendId], references: [id], onDelete: Cascade)
  friendId    Int  @map("friend_id")

  @@id([requestorId, friendId])
  @@map("friend")
}

model CatalogSignage {
  id    Int       @id @default(autoincrement())
  name  String    @db.VarChar(40)
  slug  String    @unique @db.VarChar(40)
  type  SignaType
  image String?

  @@map("catalog_signage")
}
